// Generated by Dagger (https://dagger.dev).
package com.example.todolist.di;

import com.example.domain.repo.TodoRepository;
import com.example.domain.usecase.TodoUseCases;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppModule_ProvideTodoUseCasesFactory implements Factory<TodoUseCases> {
  private final Provider<TodoRepository> repositoryProvider;

  public AppModule_ProvideTodoUseCasesFactory(Provider<TodoRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public TodoUseCases get() {
    return provideTodoUseCases(repositoryProvider.get());
  }

  public static AppModule_ProvideTodoUseCasesFactory create(
      Provider<TodoRepository> repositoryProvider) {
    return new AppModule_ProvideTodoUseCasesFactory(repositoryProvider);
  }

  public static TodoUseCases provideTodoUseCases(TodoRepository repository) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideTodoUseCases(repository));
  }
}
